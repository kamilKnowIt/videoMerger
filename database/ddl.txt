CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE videos (
    id SERIAL PRIMARY KEY,
    filename TEXT NOT NULL,
    format TEXT CHECK (format IN ('mp4', 'avi', 'mkv', 'mov')),
    duration FLOAT NOT NULL,
    resolution TEXT,
    framerate INT CHECK (framerate > 0),
    size_in_bytes BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    category TEXT,
    title TEXT,
    youtube_id TEXT
);

CREATE TABLE video_segments (
    id SERIAL PRIMARY KEY,
    video_id INT REFERENCES videos(id) ON DELETE CASCADE,
    start_time FLOAT NOT NULL,
    end_time FLOAT NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE video_vectors (
    id SERIAL PRIMARY KEY,
    video_id INT REFERENCES videos(id) ON DELETE CASCADE,
    vector VECTOR(1536) NOT NULL
);

CREATE TABLE merged_videos (
    id SERIAL PRIMARY KEY,
    output_video_id INT REFERENCES videos(id) ON DELETE CASCADE,
    merge_method TEXT CHECK (merge_method IN ('concatenation', 'morphing', 'highlights')),
    timestamp TIMESTAMP DEFAULT NOW()
);

CREATE TABLE merged_video_inputs (
    merged_video_id INT REFERENCES merged_videos(id) ON DELETE CASCADE,
    input_video_id INT REFERENCES videos(id) ON DELETE CASCADE,
    PRIMARY KEY (merged_video_id, input_video_id)
);

CREATE TABLE video_descriptions (
    id SERIAL PRIMARY KEY,
    video_id INT REFERENCES videos(id) ON DELETE CASCADE,
    description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    source TEXT, -- źródło opisu np. AI, użytkownik, automatyczny
    language TEXT -- jezyk opisu
);